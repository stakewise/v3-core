name: code coverage

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  comment-forge-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Build
        run: forge build

      - name: Run forge coverage
        id: coverage
        run: |
          {
          echo 'COVERAGE<<EOF'
          echo "| File | % Lines | % Statements | % Branches | % Funcs |"
          echo "|------|---------|--------------|------------|---------|"
          forge coverage --skip script --no-match-coverage "(keeper|mocks|test|script|tokens|VaultsRegistry|DepositDataRegistry)" 2>/dev/null | 
            grep '^|' | 
            grep -v 'test/' | 
            grep -v '^|--' | 
            grep -v 'File' |
            sed 's/-*+//g'
          echo EOF
          } >> "$GITHUB_OUTPUT"
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}

      - name: Check coverage is updated
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const file = "coverage.txt"
            if(!fs.existsSync(file)) {
              console.log("Nothing to check");
              return
            }
            const currentCoverage = fs.readFileSync(file, "utf8").trim();
            const newCoverage = (`${{ steps.coverage.outputs.COVERAGE }}`).trim();
            if (newCoverage != currentCoverage) {
              core.setFailed(`Code coverage not updated. Run : forge coverage | grep '^|' | grep -v 'test/'  > coverage.txt`);
            }

      - name: Comment on PR
        id: comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })

            const botComment = comments.find(comment => comment.user.id === 41898282)

            const output = `${{ steps.coverage.outputs.COVERAGE }}`;
            const commentBody = `Forge code coverage:\n${output}\n`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }
